FROM node:18-alpine AS builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files for pnpm
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.json ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY src/ ./src/
COPY config/ ./config/
COPY tests/e2e/config/ ./tests/e2e/config/

# Build the application
RUN pnpm run compile

# Production stage
FROM node:18-alpine AS runtime

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files and install production dependencies
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile --prod && pnpm store prune

# Copy built application
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/config ./config
COPY --from=builder /app/tests/e2e/config ./tests/e2e/config

# Copy default test config to the expected location
COPY --from=builder /app/tests/e2e/config/test-config.jsonc ./config/test-config.jsonc

# Create cache directory
RUN mkdir -p /app/cache

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3006/ping', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S dicomproxy -u 1001 -G nodejs
    
RUN chown -R dicomproxy:nodejs /app
USER dicomproxy

EXPOSE 3006 8888

CMD ["node", "dist/index.js", "config/test-config.jsonc"]